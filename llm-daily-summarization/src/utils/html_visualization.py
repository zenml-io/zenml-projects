"""
HTML Visualization Utilities for LLM Daily Summarization Pipeline

This module provides comprehensive HTML visualization capabilities for prompts,
outputs, and artifacts generated by the LLM daily summarization pipeline.
"""

import json
from datetime import datetime
from pathlib import Path
from typing import Any, Dict, List, Optional

from src.utils.models import (
    CleanedConversationData,
    ConversationData,
    ProcessedData,
    Summary,
    TaskItem,
)


class HTMLVisualizer:
    """Generate HTML visualizations for LLM pipeline artifacts."""

    def __init__(self, css_file: Optional[Path] = None):
        """Initialize HTML visualizer with optional custom CSS."""
        self.css_file = css_file
        self.base_css = self._get_base_css()

    def _get_base_css(self) -> str:
        """Get base CSS styles adapted from ZenML deep research project."""
        return """
        /* LLM Daily Summarization Pipeline Styles - Adapted from ZenML Deep Research */
        :root {
            /* ZenML Color Palette */
            --color-primary: #7a3ef4;
            --color-primary-dark: #6b35db;
            --color-primary-light: #9d6ff7;
            --color-secondary: #667eea;
            --color-accent: #764ba2;
            
            /* Status Colors */
            --color-success: #179f3e;
            --color-success-light: #d4edda;
            --color-success-dark: #155724;
            --color-warning: #a65d07;
            --color-warning-light: #fff3cd;
            --color-warning-dark: #856404;
            --color-danger: #dc3545;
            --color-danger-light: #f8d7da;
            --color-danger-dark: #721c24;
            --color-info: #007bff;
            --color-info-light: #d1ecf1;
            --color-info-dark: #004085;
            
            /* Neutrals */
            --color-text-primary: #333;
            --color-text-secondary: #666;
            --color-text-muted: #999;
            --color-heading: #2c3e50;
            --color-bg-primary: #f5f7fa;
            --color-bg-white: #ffffff;
            --color-border: #e9ecef;
            
            /* Typography */
            --font-family-base: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            --font-family-mono: 'Monaco', 'Menlo', 'Ubuntu Mono', 'Consolas', monospace;
            
            /* Spacing */
            --spacing-xs: 4px;
            --spacing-sm: 8px;
            --spacing-md: 16px;
            --spacing-lg: 24px;
            --spacing-xl: 32px;
            --spacing-xxl: 48px;
            
            /* Border Radius */
            --radius-sm: 4px;
            --radius-md: 6px;
            --radius-lg: 8px;
            
            /* Shadows */
            --shadow-sm: 0 1px 2px rgba(0, 0, 0, 0.05);
            --shadow-md: 0 4px 12px rgba(0, 0, 0, 0.1);
            --shadow-hover: 0 6px 16px rgba(0, 0, 0, 0.1);
            
            /* Transitions */
            --transition-base: all 0.3s ease;
        }
        
        body {
            font-family: var(--font-family-base);
            font-size: 14px;
            line-height: 1.6;
            color: var(--color-text-primary);
            background-color: var(--color-bg-primary);
            margin: 0;
            padding: var(--spacing-md);
        }
        
        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: var(--spacing-md);
        }
        
        .header {
            background: white;
            border-radius: var(--radius-md);
            padding: var(--spacing-lg);
            margin-bottom: var(--spacing-lg);
            box-shadow: var(--shadow-sm);
            border-bottom: 3px solid var(--color-primary);
        }
        
        .header h1 {
            color: var(--color-heading);
            margin: 0 0 var(--spacing-sm) 0;
            font-size: 2em;
            font-weight: 500;
        }
        
        .header .subtitle {
            color: var(--color-text-secondary);
            font-size: 16px;
            margin: 0;
        }
        
        .card {
            background: var(--color-bg-white);
            border-radius: var(--radius-md);
            padding: var(--spacing-lg);
            margin-bottom: var(--spacing-lg);
            box-shadow: var(--shadow-md);
            transition: var(--transition-base);
        }
        
        .card:hover {
            transform: translateY(-2px);
            box-shadow: var(--shadow-hover);
        }
        
        .card h2 {
            color: var(--color-primary);
            margin: 0 0 var(--spacing-md) 0;
            font-size: 1.4em;
            font-weight: 500;
            border-bottom: 2px solid var(--color-primary);
            padding-bottom: var(--spacing-xs);
        }
        
        .card h3 {
            color: var(--color-heading);
            margin: var(--spacing-md) 0 var(--spacing-sm) 0;
            font-size: 1.2em;
            font-weight: 500;
        }
        
        .grid {
            display: grid;
            gap: var(--spacing-md);
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        }
        
        .grid-stats {
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        }
        
        .stat-card {
            background: var(--color-bg-white);
            border-radius: var(--radius-md);
            padding: var(--spacing-lg);
            text-align: center;
            border: 1px solid var(--color-border);
            box-shadow: var(--shadow-sm);
        }
        
        .stat-value {
            font-size: 2rem;
            font-weight: 600;
            color: var(--color-primary);
            margin-bottom: var(--spacing-xs);
        }
        
        .stat-label {
            color: var(--color-text-secondary);
            font-size: 13px;
            text-transform: uppercase;
            letter-spacing: 0.3px;
            font-weight: 500;
        }
        
        .badge {
            display: inline-block;
            padding: 4px 12px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.3px;
        }
        
        .badge-success {
            background-color: var(--color-success-light);
            color: var(--color-success-dark);
        }
        
        .badge-warning {
            background-color: var(--color-warning-light);
            color: var(--color-warning-dark);
        }
        
        .badge-info {
            background-color: var(--color-info-light);
            color: var(--color-info-dark);
        }
        
        .code-block {
            background-color: #f7f7f7;
            border: 1px solid #e1e1e8;
            border-radius: var(--radius-sm);
            padding: var(--spacing-md);
            font-family: var(--font-family-mono);
            overflow-x: auto;
            white-space: pre-wrap;
            font-size: 12px;
            line-height: 1.4;
        }
        
        .prompt-section {
            border-left: 4px solid var(--color-primary);
            background-color: #f8f9ff;
        }
        
        .output-section {
            border-left: 4px solid var(--color-success);
            background-color: #f0fff4;
        }
        
        .conversation-item {
            background: var(--color-bg-white);
            border-radius: var(--radius-sm);
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-sm);
            border-left: 3px solid var(--color-secondary);
        }
        
        .conversation-meta {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: var(--spacing-xs);
            font-size: 12px;
            color: var(--color-text-muted);
        }
        
        .task-item {
            background: var(--color-bg-white);
            border-radius: var(--radius-sm);
            padding: var(--spacing-md);
            margin-bottom: var(--spacing-sm);
            border-left: 3px solid var(--color-warning);
        }
        
        .task-assignee {
            font-weight: 600;
            color: var(--color-primary);
        }
        
        .timestamp {
            text-align: right;
            color: var(--color-text-muted);
            font-size: 12px;
            margin-top: var(--spacing-md);
            padding-top: var(--spacing-md);
            border-top: 1px dashed var(--color-border);
        }
        
        .nav-tabs {
            display: flex;
            border-bottom: 2px solid var(--color-border);
            margin-bottom: var(--spacing-lg);
        }
        
        .nav-tab {
            padding: var(--spacing-md) var(--spacing-lg);
            background: none;
            border: none;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            color: var(--color-text-secondary);
            transition: var(--transition-base);
        }
        
        .nav-tab.active {
            color: var(--color-primary);
            border-bottom: 2px solid var(--color-primary);
        }
        
        .tab-content {
            display: none;
        }
        
        .tab-content.active {
            display: block;
        }
        
        @media (max-width: 768px) {
            .grid {
                grid-template-columns: 1fr;
            }
            
            .container {
                padding: var(--spacing-sm);
            }
            
            .card {
                padding: var(--spacing-md);
            }
        }
        """

    def generate_pipeline_dashboard(
        self,
        processed_data: ProcessedData,
        raw_conversations: List[ConversationData],
        cleaned_data: List[CleanedConversationData],
        agent_prompts: Optional[Dict[str, str]] = None,
        evaluation_metrics: Optional[Dict[str, Any]] = None,
        run_metadata: Optional[Dict[str, Any]] = None,
    ) -> str:
        """Generate comprehensive HTML dashboard for pipeline results."""

        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

        # Calculate statistics
        stats = self._calculate_stats(
            processed_data, raw_conversations, cleaned_data
        )

        html_content = f"""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>LLM Daily Summarization - Pipeline Results</title>
            <style>{self.base_css}</style>
        </head>
        <body>
            <div class="container">
                {self._generate_header(timestamp, run_metadata)}
                {self._generate_stats_section(stats)}
                {self._generate_tabbed_content(processed_data, raw_conversations, cleaned_data, agent_prompts, evaluation_metrics)}
            </div>
            
            <script>
            function showTab(event, tabName) {{
                var i, tabcontent, tablinks;
                tabcontent = document.getElementsByClassName("tab-content");
                for (i = 0; i < tabcontent.length; i++) {{
                    tabcontent[i].classList.remove("active");
                }}
                tablinks = document.getElementsByClassName("nav-tab");
                for (i = 0; i < tablinks.length; i++) {{
                    tablinks[i].classList.remove("active");
                }}
                document.getElementById(tabName).classList.add("active");
                event.currentTarget.classList.add("active");
            }}
            
            // Show first tab by default
            document.addEventListener('DOMContentLoaded', function() {{
                document.querySelector('.nav-tab').click();
            }});
            </script>
        </body>
        </html>
        """

        return html_content

    def _generate_header(
        self, timestamp: str, run_metadata: Optional[Dict[str, Any]]
    ) -> str:
        """Generate HTML header section."""
        model_info = ""
        if run_metadata and "model_config" in run_metadata:
            model_config = run_metadata["model_config"]
            model_info = f"""
            <div style="margin-top: var(--spacing-sm); font-size: 14px; color: var(--color-text-secondary);">
                Model: {model_config.get('model_name', 'N/A')} • 
                Max Tokens: {model_config.get('max_tokens', 'N/A')} • 
                Temperature: {model_config.get('temperature', 'N/A')}
            </div>
            """

        return f"""
        <div class="header">
            <h1>🤖 LLM Daily Summarization Pipeline Results</h1>
            <p class="subtitle">Generated on {timestamp} using ZenML + LangGraph + Vertex AI</p>
            {model_info}
        </div>
        """

    def _generate_stats_section(self, stats: Dict[str, Any]) -> str:
        """Generate statistics cards section."""
        return f"""
        <div class="grid grid-stats">
            <div class="stat-card">
                <div class="stat-value">{stats['total_conversations']}</div>
                <div class="stat-label">Conversations</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{stats['total_messages']}</div>
                <div class="stat-label">Messages</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{stats['summaries_generated']}</div>
                <div class="stat-label">Summaries</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{stats['tasks_extracted']}</div>
                <div class="stat-label">Tasks</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{stats['total_tokens']}</div>
                <div class="stat-label">Total Tokens</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">${stats['estimated_cost']:.4f}</div>
                <div class="stat-label">Est. Cost</div>
            </div>
        </div>
        """

    def _generate_tabbed_content(
        self,
        processed_data: ProcessedData,
        raw_conversations: List[ConversationData],
        cleaned_data: List[CleanedConversationData],
        agent_prompts: Optional[Dict[str, str]],
        evaluation_metrics: Optional[Dict[str, Any]],
    ) -> str:
        """Generate tabbed content sections."""
        return f"""
        <div class="nav-tabs">
            <button class="nav-tab" onclick="showTab(event, 'summaries')">📋 Summaries</button>
            <button class="nav-tab" onclick="showTab(event, 'tasks')">✅ Tasks</button>
            <button class="nav-tab" onclick="showTab(event, 'conversations')">💬 Conversations</button>
            <button class="nav-tab" onclick="showTab(event, 'prompts')">🎯 Prompts</button>
            <button class="nav-tab" onclick="showTab(event, 'metrics')">📊 Metrics</button>
        </div>
        
        <div id="summaries" class="tab-content">
            {self._generate_summaries_section(processed_data.summaries)}
        </div>
        
        <div id="tasks" class="tab-content">
            {self._generate_tasks_section(processed_data.tasks)}
        </div>
        
        <div id="conversations" class="tab-content">
            {self._generate_conversations_section(cleaned_data)}
        </div>
        
        <div id="prompts" class="tab-content">
            {self._generate_prompts_section(agent_prompts)}
        </div>
        
        <div id="metrics" class="tab-content">
            {self._generate_metrics_section(evaluation_metrics)}
        </div>
        """

    def _generate_summaries_section(self, summaries: List[Summary]) -> str:
        """Generate summaries display section."""
        if not summaries:
            return '<div class="card"><p>No summaries generated.</p></div>'

        summaries_html = ""
        for i, summary in enumerate(summaries):
            confidence_class = self._get_confidence_class(
                summary.confidence_score
            )
            summaries_html += f"""
            <div class="card output-section">
                <h3>Summary #{i+1}</h3>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--spacing-md);">
                    <span class="badge badge-info">{summary.data_source}</span>
                    <span class="badge {confidence_class}">Confidence: {summary.confidence_score:.2f}</span>
                </div>
                <div style="margin-bottom: var(--spacing-md);">
                    <strong>Key Points:</strong>
                    <ul>
                        {"".join(f"<li>{point}</li>" for point in summary.key_points)}
                    </ul>
                </div>
                <div>
                    <strong>Full Summary:</strong>
                    <p style="margin-top: var(--spacing-sm); line-height: 1.6;">{summary.summary_text}</p>
                </div>
                {f'<div class="timestamp">Generated: {summary.metadata.get("timestamp", "N/A")}</div>' if summary.metadata else ''}
            </div>
            """

        return summaries_html

    def _generate_tasks_section(self, tasks: List[TaskItem]) -> str:
        """Generate tasks display section."""
        if not tasks:
            return '<div class="card"><p>No tasks extracted.</p></div>'

        tasks_html = ""
        for i, task in enumerate(tasks):
            priority_class = self._get_priority_class(task.priority)
            tasks_html += f"""
            <div class="task-item">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: var(--spacing-sm);">
                    <span class="badge {priority_class}">{task.priority} Priority</span>
                    <span class="task-assignee">@{task.assigned_to or 'Unassigned'}</span>
                </div>
                <h4 style="margin: var(--spacing-sm) 0; color: var(--color-heading);">
                    Task #{i+1}: {task.task_description}
                </h4>
                {f'<p style="margin: var(--spacing-sm) 0; color: var(--color-text-secondary);"><strong>Due:</strong> {task.due_date}</p>' if task.due_date else ''}
                {f'<p style="margin: var(--spacing-sm) 0; color: var(--color-text-secondary);"><strong>Context:</strong> {task.context}</p>' if task.context else ''}
            </div>
            """

        return f'<div class="card">{tasks_html}</div>'

    def _generate_conversations_section(
        self, cleaned_data: List[CleanedConversationData]
    ) -> str:
        """Generate conversations display section."""
        if not cleaned_data:
            return '<div class="card"><p>No conversations available.</p></div>'

        conversations_html = ""
        for conv in cleaned_data:
            conversations_html += f"""
            <div class="card">
                <h3>📍 {conv.channel_name} ({conv.data_source})</h3>
                <div style="margin-bottom: var(--spacing-lg);">
                    <span class="badge badge-info">{len(conv.messages)} messages</span>
                    <span class="badge badge-success">Quality Score: {conv.quality_score:.2f}</span>
                </div>
                <div>
                    {"".join(self._format_message(msg) for msg in conv.messages[:10])}
                    {f'<p style="color: var(--color-text-muted); font-style: italic; margin-top: var(--spacing-md);">... and {len(conv.messages) - 10} more messages</p>' if len(conv.messages) > 10 else ''}
                </div>
            </div>
            """

        return conversations_html

    def _format_message(self, message: dict) -> str:
        """Format individual message for display."""
        timestamp = message.get("timestamp", "Unknown time")
        author = message.get("author", "Unknown user")
        content = message.get("content", "")

        return f"""
        <div class="conversation-item">
            <div class="conversation-meta">
                <strong>{author}</strong>
                <span>{timestamp}</span>
            </div>
            <p style="margin: 0; line-height: 1.5;">{content[:200]}{'...' if len(content) > 200 else ''}</p>
        </div>
        """

    def _generate_prompts_section(
        self, agent_prompts: Optional[Dict[str, str]]
    ) -> str:
        """Generate prompts display section."""
        if not agent_prompts:
            return '<div class="card"><p>No agent prompts available.</p></div>'

        prompts_html = ""
        for agent_name, prompt in agent_prompts.items():
            prompts_html += f"""
            <div class="card prompt-section">
                <h3>🎯 {agent_name.replace('_', ' ').title()} Prompt</h3>
                <div class="code-block">{self._escape_html(prompt)}</div>
            </div>
            """

        return prompts_html

    def _generate_metrics_section(
        self, evaluation_metrics: Optional[Dict[str, Any]]
    ) -> str:
        """Generate metrics display section."""
        if not evaluation_metrics:
            return '<div class="card"><p>No evaluation metrics available.</p></div>'

        return f"""
        <div class="card">
            <h3>📊 Pipeline Evaluation Metrics</h3>
            <div class="code-block">{json.dumps(evaluation_metrics, indent=2)}</div>
        </div>
        """

    def _calculate_stats(
        self,
        processed_data: ProcessedData,
        raw_conversations: List[ConversationData],
        cleaned_data: List[CleanedConversationData],
    ) -> Dict[str, Any]:
        """Calculate pipeline statistics."""
        total_messages = sum(len(conv.messages) for conv in cleaned_data)
        total_tokens = processed_data.usage_stats.get("total_tokens", 0)
        estimated_cost = processed_data.usage_stats.get("total_cost", 0)

        return {
            "total_conversations": len(raw_conversations),
            "total_messages": total_messages,
            "summaries_generated": len(processed_data.summaries),
            "tasks_extracted": len(processed_data.tasks),
            "total_tokens": total_tokens,
            "estimated_cost": estimated_cost,
        }

    def _get_confidence_class(self, confidence: float) -> str:
        """Get CSS class for confidence level."""
        if confidence >= 0.8:
            return "badge-success"
        elif confidence >= 0.6:
            return "badge-warning"
        else:
            return "badge-danger"

    def _get_priority_class(self, priority: str) -> str:
        """Get CSS class for task priority."""
        priority_lower = priority.lower()
        if priority_lower == "high":
            return "badge-danger"
        elif priority_lower == "medium":
            return "badge-warning"
        else:
            return "badge-success"

    def _escape_html(self, text: str) -> str:
        """Escape HTML characters in text."""
        return (
            text.replace("&", "&amp;")
            .replace("<", "&lt;")
            .replace(">", "&gt;")
            .replace('"', "&quot;")
            .replace("'", "&#x27;")
        )
