# Deep Research Pipeline Configuration - Parallelized Version
enable_cache: true

# ZenML MCP
model:
  name: "deep_research"
  description: "Parallelized ZenML pipelines for deep research on a given query."
  tags:
    [
      "research",
      "exa",
      "tavily",
      "openrouter",
      "sambanova",
      "langfuse",
      "parallel",
    ]
  use_cases: "Research on a given query."

# Langfuse project name for LLM tracking
langfuse_project_name: "deep-research"

# Pipeline parameters
parameters:
  query: "How are people balancing MLOps and Agents/LLMOps?"
  max_sub_questions: 10

# Step parameters
steps:
  initial_query_decomposition_step:
    parameters:
      llm_model: "sambanova/DeepSeek-R1-Distill-Llama-70B"
  
  process_sub_question_step:
    parameters:
      llm_model_search: "sambanova/Meta-Llama-3.3-70B-Instruct"
      llm_model_synthesis: "sambanova/DeepSeek-R1-Distill-Llama-70B"
      cap_search_length: 20000
  
  merge_sub_question_results_step:
    parameters:
      step_prefix: "process_question_"
      output_name: "output"
  
  cross_viewpoint_analysis_step:
    parameters:
      llm_model: "sambanova/DeepSeek-R1-Distill-Llama-70B"
      viewpoint_categories: ["scientific", "political", "economic", "social", "ethical", "historical"]
  
  generate_reflection_step:
    parameters:
      llm_model: "sambanova/DeepSeek-R1-Distill-Llama-70B"

  get_research_approval_step:
    parameters:
      timeout: 3600
      max_queries: 2

  execute_approved_searches_step:
    parameters:
      llm_model: "sambanova/DeepSeek-R1-Distill-Llama-70B"
      cap_search_length: 20000
  
  pydantic_final_report_step:
    parameters:
      llm_model: "sambanova/DeepSeek-R1-Distill-Llama-70B"

# Environment settings
settings:
  docker:
    requirements:
      - openai>=1.0.0
      - tavily-python>=0.2.8
      - PyYAML>=6.0
      - click>=8.0.0
      - pydantic>=2.0.0
      - typing_extensions>=4.0.0
  
  # Uncomment and customize these settings when running with orchestrators that support parallelization
  # orchestrator.kubeflow:
  #   synchronous: false
  #   resources:
  #     cpu_request: "1"
  #     memory_request: "2Gi"
  #     cpu_limit: "2"  
  #     memory_limit: "4Gi"
  
  # orchestrator.kubernetes:
  #   synchronous: false
  #   resources:
  #     process_sub_question_step:
  #       cpu_request: "1"
  #       memory_request: "2Gi" 